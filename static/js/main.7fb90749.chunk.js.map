{"version":3,"sources":["services/Auth/FakeAuth.js","services/Auth/PrivateRoute.js","containers/LoginPage.js","components/Layout/Header.js","components/Layout/CustomButtons.js","components/Workflows/Workflow.js","components/Workflows/Workflows.js","services/Mockdata/WorkflowService.js","containers/WorkflowsContainer.js","components/Nodes/Node.js","components/Nodes/Nodes.js","containers/CreateWorkflow.js","containers/App.js","serviceWorker.js","index.js"],"names":["fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","AuthButton","withRouter","history","onClick","push","PrivateRoute","children","rest","render","location","to","pathname","state","from","LoginPage","useHistory","useLocation","Container","maxWidth","className","TextField","label","variant","size","type","Checkbox","color","value","Button","replace","HeaderLayout","props","SuccessButton","withStyles","root","backgroundColor","green","DangerButton","red","PurpleButton","purple","Workflow","editWorkflow","event","preventDefault","stopPropagation","url","id","iconClass","status","this","completed","clicked","Icon","style","fontSize","deleteHandler","name","Component","Workflows","openDialog","activePendingWorkflow","workflowClickHandler","wflow","nodes","findIndex","node","workflowUpdatedHandler","showPendingAlertDialog","setState","closePendingAlertDialog","workflows","alertDialog","map","key","deleteWorkflowHandler","Dialog","open","onClose","DialogTitle","DialogContent","dividers","DialogContentText","DialogActions","getWorkflows","a","Promise","resolve","getWorkflowByID","index","w","updateWorkflow","existingIndex","title","content","WorkflowsContainer","filterDropdownChangeHandler","selected","target","filteredWorkflows","workflowsList","filter","filterDropdownValue","componentDidMount","deleteWorkflowClickHandler","splice","deleteWorkflow","text","match","toLowerCase","indexOf","placeholder","onChange","searchInputChangeHandler","bind","disabled","hidden","startIcon","statuses","Node","statusIconClickHandler","_event","changed","Nodes","changeHandler","prop","nodeIndex","n","CreateWorkflow","validateWorkflowState","isWorkflowCompleted","i","length","nameChangeHandler","shuffleWorkflowsHandler","j","Math","floor","random","pop","addNodeClickHandler","saveWorkflowClickHandler","workflow","parseInt","params","fetchData","updateNodesHandler","App","path","component","exact","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fb90749.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nexport const fakeAuth = {\n    isAuthenticated: false,\n    authenticate(cb) {\n        \n      fakeAuth.isAuthenticated = true;\n      setTimeout(cb, 100); // fake async\n    },\n    signout(cb) {\n      fakeAuth.isAuthenticated = false;\n      setTimeout(cb, 100);\n    }\n};\n\nexport const AuthButton = withRouter(({ history }) => (\n    fakeAuth.isAuthenticated\n      ? <p>\n          Welcome! <button onClick={() => {\n            fakeAuth.signout(() => history.push('/'))\n          }}>Sign out</button>\n        </p>\n      : null\n));","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { fakeAuth } from './FakeAuth';\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n    return (\n      <Route\n        {...rest}\n        render={({ location }) =>\n          fakeAuth.isAuthenticated ? (\n            children\n          ) : (\n            <Redirect\n              to={{\n                pathname: \"/login\",\n                state: { from: location }\n              }}\n            />\n          )\n        }\n      />\n    );\n}\n\nexport default PrivateRoute;","import React from 'react';\nimport \"./App.css\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { fakeAuth } from '../services/Auth/FakeAuth';\nimport { Container, TextField, Button, Checkbox } from '@material-ui/core';\n\n\nfunction LoginPage() {\n    let history = useHistory();\n    let location = useLocation();\n  \n    let { from } = location.state || { from: { pathname: \"/\" } };\n    let login = () => {\n      fakeAuth.authenticate(() => {\n        history.replace(from);\n      });\n    };\n  \n    return (\n        <Container maxWidth=\"xs\" className=\"login-container box-layout\">\n            <h2 className=\"text-center\">Login</h2>\n            <div className=\"input-field\">\n                <TextField label=\"Username\" variant=\"outlined\" size=\"small\" />\n            </div>\n            <div className=\"password-field\">\n                <TextField type=\"password\" label=\"Password\" variant=\"outlined\" size=\"small\" />\n            </div>\n\n            <div className=\"rememberme-field\">\n                <Checkbox color=\"primary\" value=\"checkedA\" />\n                <label>Remember Me</label>\n            </div>\n\n            <div className=\"sumbit-button text-center\">\n                <Button variant=\"contained\" color=\"primary\" onClick={login}>Log in</Button>\n            </div>\n        </Container>\n    );\n}\n\nexport default LoginPage;","import React from 'react';\nimport './Header.css';\n\nconst HeaderLayout = (props) => {\n    return <div className=\"button-layout\">{props.children}</div>\n}\n\nexport default HeaderLayout;","import { withStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport { green, red, purple } from \"@material-ui/core/colors\";\n\nexport const SuccessButton = withStyles(() => ({\n    root: {\n      color: '#fff',\n      backgroundColor: green[500],\n      \"&:hover\": {\n        backgroundColor: green[700]\n      }\n    }\n}))(Button);\n\nexport const DangerButton = withStyles(() => ({\n    root: {\n      color: '#fff',\n      backgroundColor: red[500],\n      \"&:hover\": {\n        backgroundColor: red[700]\n      }\n    }\n}))(Button);\n\n\nexport const PurpleButton = withStyles(() => ({\n    root: {\n      color: '#fff',\n      backgroundColor: purple[500],\n      \"&:hover\": {\n        backgroundColor: purple[700]\n      }\n    }\n}))(Button);","import React, { Component } from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport Icon from '@material-ui/core/Icon';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n\nclass Workflow extends Component {\n    // Attributes -  \n    // Name: string\n    // Completed: boolean\n    // Nodes: Node[]\n\n    editWorkflow = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const url = `/edit/${this.props.id}`;\n\n        if (this.props.history){\n            this.props.history.push(url);\n        }\n    }\n\n    render () {\n        let iconClass = \"default\";\n        let status = \"Pending\";\n\n        if (this.props.completed) {\n            iconClass = \"success\";\n            status = \"Completed\";\n        }\n\n        return (\n            <div className='wflow-container box-layout' onClick={this.props.clicked}>\n                \n                <div className='md-icon left-corner hide'>\n                    <Icon className=\"fa fa-pencil-square\"\n                        color=\"secondary\"\n                        style={{ fontSize: 30 }}\n                        onClick={this.editWorkflow}/>\n                </div>\n\n                <div className='md-icon right-corner hide'>\n                    <DeleteForeverIcon\n                        color=\"secondary\" \n                        onClick={this.props.deleteHandler} \n                        fontSize=\"large\"/>\n                </div>\n\n                <div>\n                    <div className='title box-layout text-transform-uppercase'>\n                        {this.props.name} \n                    </div>\n                    <div className='nodes-list text-transform-uppercase'>\n                        <ul>\n                            <li>\n                                <span>{status}</span>\n                                <CheckCircleIcon className={`float-right md-icon ${iconClass}`} />\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Workflow);","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport './Workflows.css';\nimport Workflow from './Workflow';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass Workflows extends Component {\n    \n    state = {\n        openDialog: false,\n        activePendingWorkflow: null\n    }\n\n    /**\n     * if all child nodes are complete, workflow card's state should be completed\n     * if any pending child, allow user to edit nodes\n     */\n    workflowClickHandler = (event, wflow) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (wflow.nodes) {\n            let isAnyNodePending = wflow.nodes.findIndex(node => {\n                return node.status !== \"completed\"\n            });\n\n            if (isAnyNodePending !== -1 || !wflow.completed) {\n                this.showPendingAlertDialog(wflow);\n            } else {\n                wflow.completed = false;\n                this.props.workflowUpdatedHandler(wflow);\n            }\n        }\n    }\n\n    showPendingAlertDialog = (wflow) => {\n        this.setState({\n            openDialog: true,\n            activePendingWorkflow: wflow\n        });\n    }\n\n    closePendingAlertDialog = () => {\n        this.setState({\n            openDialog: false\n        });\n    }\n\n    render () {\n        let workflows = null;\n        let alertDialog = null;\n\n        if (this.props.workflows) {\n            workflows = (this.props.workflows.map((wflow) => {\n                    return <Workflow key={wflow.id}\n                        id={wflow.id}\n                        name={wflow.name}\n                        completed={wflow.completed}\n                        nodes={wflow.nodes}\n                        clicked={(event) => this.workflowClickHandler(event, wflow)}\n                        deleteHandler={(event) => this.props.deleteWorkflowHandler(event, wflow.id) }/> \n                    })\n                )\n        }\n\n        if (this.state.activePendingWorkflow) {\n            alertDialog = (\n                <Dialog\n                    open={this.state.openDialog}\n                    onClose={this.closePendingAlertDialog}\n                >\n                    <DialogTitle id=\"alert-dialog-title\">{\"Alert\"}</DialogTitle>\n                    <DialogContent dividers>\n                        <DialogContentText>\n                                Workflow (<strong> {this.state.activePendingWorkflow.name} </strong>) \n                                    cannot be marked completed as there might be nodes which are still \n                                    <strong> \"in-progress\"</strong> or <strong>\"pending\".</strong>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.closePendingAlertDialog} color=\"primary\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )\n        }\n\n        return (\n            <div>\n                <div className=\"workflows-container\">\n                    { workflows }\n                </div>\n                { alertDialog }\n            </div>\n        )\n    }\n}\n\nexport default Workflows;","\nexport const getWorkflows = async () => { \n    return Promise.resolve(workflows);\n}\n\nexport const getWorkflowByID = async (id) => {\n    \n    let index = workflows.findIndex( w => w.id === id);\n    return Promise.resolve(workflows[index]);\n}\n\nexport const updateWorkflow = (wflow) => {\n    let existingIndex = workflows.findIndex(w => w.id === wflow.id);\n\n    if (existingIndex !== -1) {\n        workflows[existingIndex] = wflow;\n    } else {\n        workflows.push(wflow);\n    }\n}\n\nexport const deleteWorkflow = (id) => {\n    let existingIndex = workflows.findIndex(w => w.id === id);\n\n    if (existingIndex !== -1) {\n        workflows.splice(existingIndex, 1);\n    }\n}\n\nlet workflows = [\n    {\n        id: 1,\n        name: 'Workflow 1',\n        completed: false,\n        nodes: [\n            {id: '1-node1', title: 'Task 1', status: 'completed', content: 'This task is completed'},\n            {id: '1-node2', title: 'Task 2', status: 'in-progress', content: 'This task is inprogress'},\n            {id: '1-node3', title: 'Task 2', status: 'pending', content: 'This task is pending'}\n        ]\n    },\n    {\n        id: 2,\n        name: 'Workflow 2',\n        completed: true,\n        nodes: [\n            {id: '2-node1', title: 'Task 1', status:'completed', content: 'Tasks are pending'},\n            {id: '1-node2', title: 'Task 2', status: 'completed', content: 'This task is inprogress'}\n        ]\n    },\n    {\n        id: 3,\n        name: 'Workflow 3',\n        completed: false,\n        nodes: [\n            {id: '3-node1', title: 'Task 1', status:'pending', content: 'Tasks are pending'}\n        ]\n    }\n];","import React, { Component } from \"react\";\nimport { Link, withRouter } from 'react-router-dom';\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport HeaderLayout from '../components/Layout/Header';\nimport { SuccessButton } from '../components/Layout/CustomButtons';\nimport Workflows from '../components/Workflows/Workflows';\nimport { getWorkflows, deleteWorkflow, updateWorkflow } from \"../services/Mockdata/WorkflowService\";\n\nclass WorkflowsContainer extends Component {\n\n    constructor () {\n        super();\n        this.state = {\n            workflows: this.workflowsList,\n            filterDropdownValue: ''\n        }\n    }\n\n    async componentDidMount() {\n        let workflows = await getWorkflows();\n        this.workflowsList = workflows;\n       \n        this.setState({\n            workflows: this.workflowsList,\n        });\n    }\n\n    componentWillUnmount() {\n        this.workflowsList = [];\n    }\n\n    searchInputChangeHandler(event) {\n        let text = event.target.value;\n        let list = [...this.workflowsList]; // clone instead of passing reference\n\n        let filteredWorkflows = list.filter(wflow => {\n            let match = false;\n            if (wflow.name) {\n                match = wflow.name.toLowerCase().indexOf(text.toLowerCase()) !== -1;\n            }\n            return match;\n        });\n\n        this.setState({\n            workflows: filteredWorkflows\n        })\n    }\n\n    filterDropdownChangeHandler = (event) => {\n        let selected = event.target.value;\n        let list = [...this.workflowsList];\n\n        let filteredWorkflows = list.filter(wflow => {\n            let match = true; // returns all workflows if selected==\"all\"\n\n            if (selected === \"completed\") {\n                return wflow.completed\n            }\n            else if (selected === \"pending\") {\n                return !wflow.completed\n            }\n\n            return match;\n        });\n\n        this.setState({\n            workflows: filteredWorkflows,\n            filterDropdownValue: event.target.value\n        })\n    }\n\n    workflowUpdatedHandler = (wflow) => {\n        let list = [...this.workflowsList];\n        let index = list.findIndex(w => w.id === wflow.id);\n        \n        if (index !== -1){\n            // update and rerender\n            updateWorkflow(wflow);\n            this.componentDidMount();\n        }\n    }\n\n    deleteWorkflowClickHandler = (event, id) => {\n        event.preventDefault();\n        event.stopPropagation();\n        \n        //delete from database\n        deleteWorkflow(id);\n        \n        // fetch new updated list\n        this.componentDidMount();\n    }\n    \n    render () {\n        return (\n            <div>\n                <HeaderLayout>\n                    <div className=\"block first\">\n                        <input className=\"subitem\" type=\"text\" \n                            placeholder=\"Search Workflows\"\n                            onChange={this.searchInputChangeHandler.bind(this)} />\n\n                        <select className=\"subitem\" \n                            value={this.state.filterDropdownValue} \n                            onChange={this.filterDropdownChangeHandler}>\n                                <option value=\"\" disabled hidden>-- Filter --</option>\n                                <option value=\"all\">All</option>\n                                <option value=\"completed\">Completed</option>\n                                <option value=\"pending\">Pending</option>\n                        </select>\n                    </div>\n\n                    <div className=\"block second\">\n                        <SuccessButton\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<AddIcon />}\n                            size=\"small\">\n                            <Link to=\"/edit\">Create Workflow</Link>\n                        </SuccessButton>\n                    </div>\n                </HeaderLayout>\n\n                <Workflows \n                    workflows={this.state.workflows}\n                    workflowUpdatedHandler={this.workflowUpdatedHandler}\n                    deleteWorkflowHandler={this.deleteWorkflowClickHandler} />\n            </div>\n        )\n    }\n}\n\nexport default withRouter(WorkflowsContainer);","import React, { Component } from \"react\";\nimport './Node.css';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\nconst statuses = [\"pending\", \"in-progress\", \"completed\"];\n\nclass Node extends Component {\n\n    statusIconClickHandler = () => {\n        let status = this.props.status;\n        let index = statuses.indexOf(status);\n        \n        // onChange handler on parent expects Event as first param\n        let _event = {\n            target: {   \n                value: index === 2 ? statuses[0] : statuses[index+1] // rotate status value from array\n            }\n        }\n\n        this.props.changed(_event, \"status\"); // will update parent and rerender all nodes\n    }\n\n    render() {\n        let status = this.props.status;\n        let iconClass = status === \"completed\" ? \"success\"\n                            : (status === \"in-progress\" ? \"primary\" : \"default\");\n\n        return (\n            <>\n                <div className='wflow-container box-layout'>\n                    <div>\n                        <div className={`md-icon right-corner ${iconClass}`}>\n                            <CheckCircleIcon \n                                onClick={this.statusIconClickHandler} \n                                fontSize=\"large\"/>\n                        </div>\n                        <div className='title'>\n                            <input value={this.props.title} \n                                onChange={(event) => this.props.changed(event, 'title')} />\n                                </div>\n                        <div className='text-area'>\n                            <textarea value={this.props.content} \n                                onChange={(event) => this.props.changed(event, 'content')} />\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Node;","import React, { Component } from \"react\";\nimport Node from './Node';\n\nclass Nodes extends Component {\n\n    /** \n     * @params\n     * event: onChange event in case of title and content change; \n     *          custom Object from Node.component for status.\n     * prop: changed property of node\n     * id: Node.id\n     */\n    changeHandler = (event, prop, id) => {\n        const nodeIndex = this.props.nodes.findIndex((n) => n.id === id);\n        const node = {\n            ...this.props.nodes[nodeIndex]\n        };\n\n        if (prop) {\n            node[prop] = event.target.value;\n        }\n\n        const nodes = [...this.props.nodes];\n        nodes[nodeIndex] = node;\n\n        this.props.changed(nodes); \n    }\n\n    render() {\n        return (\n            <div className=\"workflows-container\">\n                {\n                    this.props.nodes.map((n)=> {\n                        return <Node key={n.id}\n                                    title={n.title}\n                                    content={n.content}\n                                    status={n.status}\n                                    changed={(event, prop) => this.changeHandler(event, prop, n.id)} />\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Nodes;","import React, { Component } from \"react\";\nimport { withRouter } from 'react-router-dom';\n\nimport { Button } from \"@material-ui/core\";\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport HeaderLayout from '../components/Layout/Header';\nimport { SuccessButton, DangerButton, PurpleButton } from '../components/Layout/CustomButtons';\nimport Nodes from \"../components/Nodes/Nodes\";\nimport { getWorkflowByID, updateWorkflow } from \"../services/Mockdata/WorkflowService\";\n\n\nclass CreateWorkflow extends Component {\n    constructor () {\n        super();\n        this.state = {\n            id: '', \n            name: '',\n            completed: false, // true when all nodes are completed\n            nodes: []\n        }\n    }\n\n    componentDidMount() {\n        const id = parseInt(this.props.match.params.id);\n        if (id) {\n            this.fetchData(id);\n        }\n    }\n\n    // async fetchData = (id) => {\n    async fetchData (id) {\n        let workflow = await getWorkflowByID(id);\n        if (workflow) {\n            this.setState({\n                id: workflow.id,\n                name: workflow.name,\n                completed: this.validateWorkflowState(workflow.nodes),\n                nodes: workflow.nodes\n            })\n        }\n    }\n\n    validateWorkflowState= (nodes) => {\n        let isWorkflowCompleted = true;\n\n        for (var i=0; i < nodes.length; i++){\n            if (nodes[i].status !== \"completed\") {\n                isWorkflowCompleted = false;\n                break;\n            }\n        }\n\n        return isWorkflowCompleted;\n    }\n\n    nameChangeHandler = (event) => {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    shuffleWorkflowsHandler = () => {\n        const nodes = [...this.state.nodes];\n\n        for (let i = nodes.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [nodes[i], nodes[j]] = [nodes[j], nodes[i]];\n        }\n\n        this.setState({\n            nodes: nodes\n        });\n    }\n\n    deleteWorkflowClickHandler = () => {\n        const nodes = [...this.state.nodes];\n        \n        // deletes last node\n        nodes.pop();\n\n        // update state\n        this.setState({\n            nodes: nodes\n        });\n    }\n\n    addNodeClickHandler = () => {\n        const nodes = [...this.state.nodes];\n        nodes.push({\n            id: Math.floor(Math.random() * 1000), \n            title: '',\n            content: '',\n            status: 'pending'\n        })\n\n        this.setState({\n            completed: false, // new pending node added\n            nodes: nodes\n        });\n    }\n\n    updateNodesHandler(nodes) {\n        this.setState({\n            completed: this.validateWorkflowState(nodes),\n            nodes: nodes\n        });\n    }\n\n    saveWorkflowClickHandler = () => {\n        let workflow = {\n            id: this.state.id || Math.floor(Math.random() * 1000),\n            name: this.state.name,\n            nodes: this.state.nodes,\n            completed: this.state.completed\n        }\n\n        // Update nodes to database\n        updateWorkflow(workflow);\n\n        //redirect to home page\n        if (this.props.history){\n            this.props.history.push(\"/flowapp\");\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <HeaderLayout>\n                    <div className=\"block first\">\n                        <input className=\"subitem\" type=\"text\" \n                            placeholder=\"Workflow Name\"\n                            value={this.state.name} \n                            onChange={this.nameChangeHandler} />\n                    </div>\n                    <div className=\"block second\">\n                        {this.state.completed &&\n                        <PurpleButton\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<ShuffleIcon />}\n                            size=\"small\"\n                            onClick={this.shuffleWorkflowsHandler}>Shuffle</PurpleButton>    \n                        }              \n                        <DangerButton\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<ClearIcon />}\n                            size=\"small\"\n                            onClick={this.deleteWorkflowClickHandler}>Delete</DangerButton>\n                        <SuccessButton\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<AddIcon />}\n                            size=\"small\"\n                            onClick={this.addNodeClickHandler}>Add Node</SuccessButton>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            size=\"small\"\n                            onClick={this.saveWorkflowClickHandler}>Save</Button>\n                        \n                    </div>\n                </HeaderLayout>\n\n                <Nodes nodes={this.state.nodes} changed={(nodes) => this.updateNodesHandler(nodes)} />\n            </div>\n        )\n    }\n}\n\nexport default withRouter(CreateWorkflow);","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { AuthButton } from '../services/Auth/FakeAuth';\nimport PrivateRoute from '../services/Auth/PrivateRoute';\nimport LoginPage from './LoginPage';\nimport WorkflowsContainer from './WorkflowsContainer';\nimport CreateWorkflow from './CreateWorkflow';\n\nclass App extends Component {\n\n  render () {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div className=\"block\">\n              <h2><Link to=\"/\">FLOWAPP</Link></h2>\n            </div>\n            <div className=\"block\">\n              <AuthButton />\n            </div>\n          </header>\n\n          {/* Route pages */}\n          <Switch>\n            <Route path=\"/login\" component={LoginPage} />\n\n            <PrivateRoute path=\"/flowapp\" >\n              <WorkflowsContainer />\n            </PrivateRoute>\n\n            <PrivateRoute path=\"/\"  exact >\n              <WorkflowsContainer />\n            </PrivateRoute>\n\n            <PrivateRoute path=\"/edit/:id?\" >\n              <CreateWorkflow />\n            </PrivateRoute>\n\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}