{"version":3,"sources":["components/Layout/ButtonLayout.js","components/Workflows/Workflow/Workflow.js","components/Workflows/Workflows.js","containers/WorkflowsContainer/WorkflowsContainer.js","components/Node/Node.js","components/Nodes/Nodes.js","containers/CreateWorkflow/CreateWorkflow.js","containers/App.js","serviceWorker.js","index.js"],"names":["ButtonLayout","props","className","children","Workflow","nodes","this","map","task","key","id","title","readOnly","value","name","Component","Workflows","workflows","wflow","isCompleted","WorkflowsContainer","workflowsList","status","content","state","console","log","event","text","target","filteredWorkflows","filter","match","toLowerCase","indexOf","setState","type","placeholder","onChange","searchInputChangeHandler","bind","selected","Button","variant","color","startIcon","size","onClick","createWorkflowClickHandler","to","Node","changed","Nodes","changeHandler","prop","nodeIndex","findIndex","n","node","CreateWorkflow","nameChangeHandler","shuffleWorkflowsHandler","i","length","j","Math","floor","random","deleteWorkflowClickHandler","pop","addNodeClickHandler","push","saveWorkflowClickHandler","alert","updateNodesHandler","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6cea3ce.chunk.js","sourcesContent":["import React from 'react';\nimport './ButtonLayout.css';\n\nconst ButtonLayout = (props) => {\n    return <div className=\"button-layout\">{props.children}</div>\n}\n\nexport default ButtonLayout;","import React, { Component } from \"react\";\nimport './Workflow.css';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\nclass Workflow extends Component {\n    // Three variables: \n    // Name: string\n    // Status - completed/pending\n    // Nodes[]\n\n    render () {\n        let nodes = null;\n        if (this.props.nodes) {\n            nodes = (\n                this.props.nodes.map( task => {\n                    return (\n                        <li key={task.id}>\n                            <span>{task.title}</span>\n                            <CheckCircleIcon className=\"float-right\" />\n                        </li>\n                    )\n                })\n            )\n        }\n\n        return (\n            <div className='wflow-container box-layout'>\n                <div>\n                    <div className='title'>\n                        <input readOnly value={this.props.name} />\n                    </div>\n                    <div className='nodes-list'>\n                        <ul>\n                            {nodes}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Workflow;","import React, { Component } from \"react\";\nimport './Workflows.css';\nimport Workflow from './Workflow/Workflow';\n\nclass Workflows extends Component {    \n\n    render () {\n        let workflows = null;\n        if (this.props.workflows) {\n            workflows = (this.props.workflows.map((wflow) => {\n                    return <Workflow key={wflow.id}\n                        name={wflow.name}\n                        isCompleted={wflow.isCompleted}\n                        nodes={wflow.nodes}/> \n                    })\n                )\n        }\n        return (\n            <div>\n                {/* Worfklow components goes here */}\n                <div className=\"workflows-container\">\n                    {workflows}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Workflows;","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ButtonLayout from '../../components/Layout/ButtonLayout';\nimport Workflows from '../../components/Workflows/Workflows';\nimport { Link } from 'react-router-dom';\n\nclass WorkflowsContainer extends Component {\n\n    constructor () {\n        super();\n        this.workflowsList = [\n            {\n                id: '1',\n                name: 'Workflow 1',\n                isCompleted: true,\n                nodes: [\n                    {id: '1-node1', title: 'Task 1', status: 'completed', content: 'This task is completed'},\n                    {id: '1-node2', title: 'Task 2', status: 'in-progress', content: 'This task is inprogress'},\n                    {id: '1-node3', title: 'Task 2', status: 'pending', content: 'This task is pending'}\n                ]\n            },\n            {\n                id: '2',\n                name: 'Workflow 2',\n                isCompleted: false,\n                nodes: [\n                    {id: '2-node1', title: 'Task 1', status:'pending', content: 'Tasks are pending'},\n                    {id: '1-node2', title: 'Task 2', status: 'in-progress', content: 'This task is inprogress'}\n                ]\n            },\n            {\n                id: '3',\n                name: 'Workflow 3',\n                isCompleted: false,\n                nodes: [\n                    {id: '3-node1', title: 'Task 1', status:'pending', content: 'Tasks are pending'}\n                ]\n            }\n        ]\n\n        this.state = {\n            workflows: this.workflowsList\n        }\n    }\n\n    createWorkflowClickHandler() {\n        console.log(\"Button Clicked!\");\n        // Load CreateWorkflow component\n    }\n\n    searchInputChangeHandler(event) {\n        // console.log(event.target.value);\n        let text = event.target.value;\n        let list = [...this.workflowsList]; // clone instead of passing reference\n\n        let filteredWorkflows = list.filter(wflow => {\n            let match = false;\n            if (wflow.name) {\n                match = wflow.name.toLowerCase().indexOf(text.toLowerCase()) !== -1;\n            }\n            return match;\n        });\n\n        this.setState({\n            workflows: filteredWorkflows\n        })\n    }\n    \n    render () {\n        return (\n            <div>\n                <ButtonLayout>\n                    <div className=\"block first\">\n                        <input className=\"subitem\" type=\"text\" \n                            placeholder=\"Search Workflows\"\n                            onChange={this.searchInputChangeHandler.bind(this)} />\n                        <select className=\"subitem\">\n                            <option selected value=\"all\">All</option>\n                            <option value=\"completed\">Completed</option>\n                            <option value=\"pending\">Pending</option>\n                        </select>\n                    </div>\n                    <div className=\"block second\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\"md-button\"\n                        startIcon={<AddIcon />}\n                        size=\"small\"\n                        onClick={this.createWorkflowClickHandler}>\n                        <Link to=\"/edit\">Create Workflow</Link>\n                    </Button>\n                    </div>\n                </ButtonLayout>\n\n                <Workflows workflows={this.state.workflows} />\n            </div>\n        )\n    }\n}\n\nexport default WorkflowsContainer;","import React, { Component } from \"react\";\nimport './Node.css';\n\nclass Node extends Component {\n\n    render() {\n        return (\n            <>\n                <div className='wflow-container box-layout'>\n                    <div>\n                        <div className='title'>\n                            <input value={this.props.title} \n                                onChange={(event) => this.props.changed(event, 'title')} />\n                                </div>\n                        <div className='text-area'>\n                            <textarea value={this.props.content} \n                                onChange={(event) => this.props.changed(event, 'content')} />\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Node;","import React, { Component } from \"react\";\nimport Node from '../Node/Node';\n\nclass Nodes extends Component {\n\n    changeHandler = (event, prop, id) => {\n        const nodeIndex = this.props.nodes.findIndex((n) => n.id === id);\n        const node = {\n            ...this.props.nodes[nodeIndex]\n        };\n\n        if (prop === 'title') {\n            node.title = event.target.value;\n        }\n        else if (prop === 'content') {\n            node.content = event.target.value;\n        }\n\n        const nodes = [...this.props.nodes];\n        nodes[nodeIndex] = node;\n\n        this.props.changed(nodes); \n    }\n\n    render() {\n        return (\n            <div className=\"workflows-container\">\n                {\n                    this.props.nodes.map((n)=> {\n                        return <Node key={n.id}\n                                    title={n.title}\n                                    content={n.content}\n                                    changed={(event, prop) => this.changeHandler(event, prop, n.id)} />\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Nodes;","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ButtonLayout from '../../components/Layout/ButtonLayout';\nimport Nodes from \"../../components/Nodes/Nodes\";\n\n\nclass CreateWorkflow extends Component {\n    constructor () {\n        super();\n        this.state = { \n            name: '',\n            nodes: []\n        }\n    }\n\n    nameChangeHandler = (event) => {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    shuffleWorkflowsHandler = () => {\n        const nodes = [...this.state.nodes];\n\n        for (let i = nodes.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [nodes[i], nodes[j]] = [nodes[j], nodes[i]];\n        }\n\n        this.setState({\n            nodes: nodes\n        });\n    }\n\n    deleteWorkflowClickHandler = () => {\n        const nodes = [...this.state.nodes];\n        \n        // deletes last node\n        nodes.pop();\n\n        // update state\n        this.setState({\n            nodes: nodes\n        });\n    }\n\n    addNodeClickHandler = () => {\n        const nodes = [...this.state.nodes];\n        nodes.push({\n            id: Math.floor(Math.random() * 1000), \n            title: '',\n            content: '',\n            status: null\n        })\n\n        // update state\n        this.setState({\n            nodes: nodes\n        })\n    }\n\n    updateNodesHandler(nodes) {\n        console.log(\"update nodes handler clicked!\");\n        this.setState({\n            nodes: nodes\n        })\n    }\n\n    saveWorkflowClickHandler = () => {\n        alert(\"name: \" + this.state.name);\n        // Update nodes to database and redirect to home page\n    }\n\n    render () {\n        return (\n            <div>\n                <ButtonLayout>\n                    <div className=\"block first\">\n                        <input className=\"subitem\" type=\"text\" \n                            placeholder=\"Workflow Name\"\n                            value={this.state.name} \n                            onChange={this.nameChangeHandler} />\n                    </div>\n                    <div className=\"block second\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<ShuffleIcon />}\n                            size=\"small\"\n                            onClick={this.shuffleWorkflowsHandler}>Shuffle</Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<ClearIcon />}\n                            size=\"small\"\n                            onClick={this.deleteWorkflowClickHandler}>Delete</Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<AddIcon />}\n                            size=\"small\"\n                            onClick={this.addNodeClickHandler}>Add Node</Button>\n                        \n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            size=\"small\"\n                            onClick={this.saveWorkflowClickHandler}>Save</Button>\n                        \n                    </div>\n                </ButtonLayout>\n\n                <Nodes nodes={this.state.nodes} changed={(nodes) => this.updateNodesHandler(nodes)} />\n            </div>\n        )\n    }\n}\n\nexport default CreateWorkflow;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport WorkflowsContainer from './WorkflowsContainer/WorkflowsContainer';\nimport CreateWorkflow from './CreateWorkflow/CreateWorkflow';\n\nclass App extends Component {\n  \n  render () {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2><Link to=\"/\">FLOWAPP</Link></h2>\n          </header>\n          {/* Route pages */}\n          <Switch>\n            <Route path=\"/\" exact>\n              <WorkflowsContainer />\n            </Route>\n            <Route path=\"/edit\">\n              <CreateWorkflow />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}