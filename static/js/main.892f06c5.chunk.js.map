{"version":3,"sources":["components/Layout/ButtonLayout.js","components/Workflows/Workflow/Workflow.js","components/Workflows/Workflows.js","services/workflows/WorkflowService.js","containers/WorkflowsContainer/WorkflowsContainer.js","components/Node/Node.js","components/Nodes/Nodes.js","containers/CreateWorkflow/CreateWorkflow.js","containers/App.js","serviceWorker.js","index.js"],"names":["ButtonLayout","props","className","children","Workflow","nodes","this","map","task","key","id","title","onClick","deleteHandler","fontSize","readOnly","value","name","Component","Workflows","workflows","wflow","isCompleted","event","deleteWorkflowHandler","getWorkflows","a","console","log","Promise","resolve","status","content","WorkflowsContainer","filterDropdownChangeHandler","selected","target","filteredWorkflows","workflowsList","filter","setState","filterDropdownValue","deleteWorkflowClickHandler","preventDefault","existingIndex","findIndex","w","splice","deleteWorkflow","componentDidMount","state","text","match","toLowerCase","indexOf","type","placeholder","onChange","searchInputChangeHandler","bind","disabled","hidden","Button","variant","color","startIcon","size","to","Node","changed","Nodes","changeHandler","prop","nodeIndex","n","node","CreateWorkflow","nameChangeHandler","shuffleWorkflowsHandler","i","length","j","Math","floor","random","pop","addNodeClickHandler","push","saveWorkflowClickHandler","updateWorkflow","history","updateNodesHandler","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.892f06c5.chunk.js","sourcesContent":["import React from 'react';\nimport './ButtonLayout.css';\n\nconst ButtonLayout = (props) => {\n    return <div className=\"button-layout\">{props.children}</div>\n}\n\nexport default ButtonLayout;","import React, { Component } from \"react\";\nimport './Workflow.css';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n\nclass Workflow extends Component {\n    // Attributes: \n    // Name: string\n    // Status - completed/pending\n    // Nodes[]\n\n    render () {\n        let nodes = null;\n        if (this.props.nodes) {\n            nodes = (\n                this.props.nodes.map( task => {\n                    return (\n                        <li key={task.id}>\n                            <span>{task.title}</span>\n                            <CheckCircleIcon className=\"float-right\" />\n                        </li>\n                    )\n                })\n            )\n        }\n\n        return (\n            <div className='wflow-container box-layout'>\n                <div>\n                    <div className='delete-icon'>\n                        <DeleteForeverIcon onClick={this.props.deleteHandler} fontSize=\"large\"/>\n                    </div>\n                    <div>\n                        <div className='title'>\n                            <input readOnly value={this.props.name} />\n                        </div>\n                        <div className='nodes-list'>\n                            <ul>\n                                {nodes}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Workflow;","import React, { Component } from \"react\";\nimport './Workflows.css';\nimport Workflow from './Workflow/Workflow';\n\nclass Workflows extends Component {    \n\n    render () {\n        let workflows = null;\n        if (this.props.workflows) {\n            workflows = (this.props.workflows.map((wflow) => {\n                    return <Workflow key={wflow.id}\n                        name={wflow.name}\n                        isCompleted={wflow.isCompleted}\n                        nodes={wflow.nodes}\n                        deleteHandler={(event) => this.props.deleteWorkflowHandler(event, wflow.id) }/> \n                    })\n                )\n        }\n        return (\n            <div>\n                {/* Worfklow components goes here */}\n                <div className=\"workflows-container\">\n                    {workflows}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Workflows;","\nexport const getWorkflows = async () => { \n    console.log(\"getWorkflows called!\");\n    return Promise.resolve(workflows);\n}\n\nexport const updateWorkflow = (wflow) => {\n    let existingIndex = workflows.findIndex(w => w.id === wflow.id);\n\n    if (existingIndex !== -1) {\n        workflows[existingIndex] = wflow;\n    } else {\n        workflows.push(wflow);\n    }\n\n    console.log(\"updateWorkflows called!\");\n}\n\nexport const deleteWorkflow = (id) => {\n    let existingIndex = workflows.findIndex(w => w.id === id);\n\n    if (existingIndex !== -1) {\n        workflows.splice(existingIndex, 1);\n    }\n}\n\nlet workflows = [\n    {\n        id: '1',\n        name: 'Workflow 1',\n        isCompleted: true,\n        nodes: [\n            {id: '1-node1', title: 'Task 1', status: 'completed', content: 'This task is completed'},\n            {id: '1-node2', title: 'Task 2', status: 'in-progress', content: 'This task is inprogress'},\n            {id: '1-node3', title: 'Task 2', status: 'pending', content: 'This task is pending'}\n        ]\n    },\n    {\n        id: '2',\n        name: 'Workflow 2',\n        isCompleted: false,\n        nodes: [\n            {id: '2-node1', title: 'Task 1', status:'pending', content: 'Tasks are pending'},\n            {id: '1-node2', title: 'Task 2', status: 'in-progress', content: 'This task is inprogress'}\n        ]\n    },\n    {\n        id: '3',\n        name: 'Workflow 3',\n        isCompleted: false,\n        nodes: [\n            {id: '3-node1', title: 'Task 1', status:'pending', content: 'Tasks are pending'}\n        ]\n    }\n];","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ButtonLayout from '../../components/Layout/ButtonLayout';\nimport Workflows from '../../components/Workflows/Workflows';\nimport { Link } from 'react-router-dom';\nimport { getWorkflows, deleteWorkflow } from \"../../services/workflows/WorkflowService\";\n\nclass WorkflowsContainer extends Component {\n\n    constructor () {\n        super();\n        this.state = {\n            workflows: this.workflowsList,\n            filterDropdownValue: ''\n        }\n    }\n\n    async componentDidMount() {\n        let workflows = await getWorkflows();\n        this.workflowsList = workflows;\n       \n        this.setState({\n            workflows: this.workflowsList,\n        });\n    }\n\n    componentWillUnmount() {\n        this.workflowsList = [];\n    }\n\n    searchInputChangeHandler(event) {\n        let text = event.target.value;\n        let list = [...this.workflowsList]; // clone instead of passing reference\n\n        let filteredWorkflows = list.filter(wflow => {\n            let match = false;\n            if (wflow.name) {\n                match = wflow.name.toLowerCase().indexOf(text.toLowerCase()) !== -1;\n            }\n            return match;\n        });\n\n        this.setState({\n            workflows: filteredWorkflows\n        })\n    }\n\n    filterDropdownChangeHandler = (event) => {\n        let selected = event.target.value;\n        let list = [...this.workflowsList];\n\n        let filteredWorkflows = list.filter(wflow => {\n            let match = true; // returns all workflows if selected==\"all\"\n\n            if (selected === \"completed\") {\n                return wflow.isCompleted\n            }\n            else if (selected === \"pending\") {\n                return !wflow.isCompleted\n            }\n\n            return match;\n        });\n\n        this.setState({\n            workflows: filteredWorkflows,\n            filterDropdownValue: event.target.value\n        })\n    }\n\n    deleteWorkflowClickHandler = (event, id) => {\n        event.preventDefault();\n        \n        //delete from database\n        deleteWorkflow(id);\n        \n        // fetch new updated list\n        this.componentDidMount();\n    }\n    \n    render () {\n        // const { match, location, history } = this.props;\n        // console.log(match);\n        return (\n            <div>\n                <ButtonLayout>\n                    <div className=\"block first\">\n                        <input className=\"subitem\" type=\"text\" \n                            placeholder=\"Search Workflows\"\n                            onChange={this.searchInputChangeHandler.bind(this)} />\n\n                        <select className=\"subitem\" \n                            value={this.state.filterDropdownValue} \n                            onChange={this.filterDropdownChangeHandler}>\n                                <option value=\"\" disabled hidden>-- Filter --</option>\n                                <option value=\"all\">All</option>\n                                <option value=\"completed\">Completed</option>\n                                <option value=\"pending\">Pending</option>\n                        </select>\n                    </div>\n\n                    <div className=\"block second\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<AddIcon />}\n                            size=\"small\">\n                            <Link to=\"/edit\">Create Workflow</Link>\n                        </Button>\n                    </div>\n                </ButtonLayout>\n\n                <Workflows workflows={this.state.workflows} deleteWorkflowHandler={this.deleteWorkflowClickHandler} />\n            </div>\n        )\n    }\n}\n\nexport default WorkflowsContainer;","import React, { Component } from \"react\";\nimport './Node.css';\n\nclass Node extends Component {\n\n    render() {\n        return (\n            <>\n                <div className='wflow-container box-layout'>\n                    <div>\n                        <div className='title'>\n                            <input value={this.props.title} \n                                onChange={(event) => this.props.changed(event, 'title')} />\n                                </div>\n                        <div className='text-area'>\n                            <textarea value={this.props.content} \n                                onChange={(event) => this.props.changed(event, 'content')} />\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Node;","import React, { Component } from \"react\";\nimport Node from '../Node/Node';\n\nclass Nodes extends Component {\n\n    changeHandler = (event, prop, id) => {\n        const nodeIndex = this.props.nodes.findIndex((n) => n.id === id);\n        const node = {\n            ...this.props.nodes[nodeIndex]\n        };\n\n        if (prop === 'title') {\n            node.title = event.target.value;\n        }\n        else if (prop === 'content') {\n            node.content = event.target.value;\n        }\n\n        const nodes = [...this.props.nodes];\n        nodes[nodeIndex] = node;\n\n        this.props.changed(nodes); \n    }\n\n    render() {\n        return (\n            <div className=\"workflows-container\">\n                {\n                    this.props.nodes.map((n)=> {\n                        return <Node key={n.id}\n                                    title={n.title}\n                                    content={n.content}\n                                    changed={(event, prop) => this.changeHandler(event, prop, n.id)} />\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Nodes;","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ButtonLayout from '../../components/Layout/ButtonLayout';\nimport Nodes from \"../../components/Nodes/Nodes\";\nimport { updateWorkflow } from \"../../services/workflows/WorkflowService\";\n\n\nclass CreateWorkflow extends Component {\n    constructor () {\n        super();\n        this.state = { \n            name: '',\n            nodes: []\n        }\n    }\n\n    nameChangeHandler = (event) => {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    shuffleWorkflowsHandler = () => {\n        const nodes = [...this.state.nodes];\n\n        for (let i = nodes.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [nodes[i], nodes[j]] = [nodes[j], nodes[i]];\n        }\n\n        this.setState({\n            nodes: nodes\n        });\n    }\n\n    deleteWorkflowClickHandler = () => {\n        const nodes = [...this.state.nodes];\n        \n        // deletes last node\n        nodes.pop();\n\n        // update state\n        this.setState({\n            nodes: nodes\n        });\n    }\n\n    addNodeClickHandler = () => {\n        const nodes = [...this.state.nodes];\n        nodes.push({\n            id: Math.floor(Math.random() * 1000), \n            title: '',\n            content: '',\n            status: null\n        })\n\n        // update state\n        this.setState({\n            nodes: nodes\n        })\n    }\n\n    updateNodesHandler(nodes) {\n        console.log(\"update nodes handler clicked!\");\n        this.setState({\n            nodes: nodes\n        })\n    }\n\n    saveWorkflowClickHandler = () => {\n        let workflow = {\n            id: Math.floor(Math.random() * 1000),\n            name: this.state.name,\n            nodes: this.state.nodes,\n        }\n\n        // Update nodes to database\n        updateWorkflow(workflow);\n\n        //redirect to home page\n        if (this.props.history){\n            this.props.history.push(\"./\");\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <ButtonLayout>\n                    <div className=\"block first\">\n                        <input className=\"subitem\" type=\"text\" \n                            placeholder=\"Workflow Name\"\n                            value={this.state.name} \n                            onChange={this.nameChangeHandler} />\n                    </div>\n                    <div className=\"block second\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<ShuffleIcon />}\n                            size=\"small\"\n                            onClick={this.shuffleWorkflowsHandler}>Shuffle</Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<ClearIcon />}\n                            size=\"small\"\n                            onClick={this.deleteWorkflowClickHandler}>Delete</Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            startIcon={<AddIcon />}\n                            size=\"small\"\n                            onClick={this.addNodeClickHandler}>Add Node</Button>\n                        \n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"md-button\"\n                            size=\"small\"\n                            onClick={this.saveWorkflowClickHandler}>Save</Button>\n                        \n                    </div>\n                </ButtonLayout>\n\n                <Nodes nodes={this.state.nodes} changed={(nodes) => this.updateNodesHandler(nodes)} />\n            </div>\n        )\n    }\n}\n\nexport default CreateWorkflow;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport WorkflowsContainer from './WorkflowsContainer/WorkflowsContainer';\nimport CreateWorkflow from './CreateWorkflow/CreateWorkflow';\n\nclass App extends Component {\n\n  render () {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2><Link to=\"/\">FLOWAPP</Link></h2>\n          </header>\n\n          {/* Route pages */}\n          <Switch>\n            <Route path=\"/\" exact component={WorkflowsContainer} />\n            <Route path=\"/edit\" component={CreateWorkflow} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}